{
  "compilerOptions": {
    //* Set the JavaScript language version for emitted JavaScript and include compatible library declarations.
    "target": "ESNext",
    //* Specify a set of bundled library declaration files that describe the target runtime environment.
    "lib": ["dom", "dom.iterable", "esnext"],
    //* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files.
    "allowJs": true,
    //* Enable error reporting in type-checked JavaScript files.
    // "checkJs": true,
    //* Skip type checking all .d.ts files.
    "skipLibCheck": true,
    //* Enable all strict type-checking options.
    "strict": true,
    //* Ensure that casing is correct in imports.
    "forceConsistentCasingInFileNames": true,
    //* Allow 'import x from y' when a module doesn't have a default export.
    "allowSyntheticDefaultImports": true,
    //* Disable emitting files from a compilation.
    "noEmit": true,
    //* Disable emitting files if any type checking errors are reported.
    "noEmitOnError": true,
    //* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility.
    "esModuleInterop": true,
    //* Specify what module code is generated.
    "module": "ESNext",
    //* Specify how TypeScript looks up a file from a given module specifier.
    "moduleResolution": "node",
    //* Enable importing .json files.
    "resolveJsonModule": true,
    //* Ensure that each file can be safely transpiled without relying on other imports.
    "isolatedModules": true,
    //* Specify what JSX code is generated.
    "jsx": "preserve",
    //* Save .tsbuildinfo files to allow for incremental compilation of projects.
    "incremental": true,
    //* Enable error reporting for expressions and declarations with an implied 'any' type.
    "noImplicitAny": true,
    //* When type checking, take into account 'null' and 'undefined'.
    "strictNullChecks": true,
    //* Raise an error when a function parameter isn't read.
    "noUnusedParameters": true,
    //* Enable error reporting for codepaths that do not explicitly return in a function.
    "noImplicitReturns": true,
    //* Generate .d.ts files from TypeScript and JavaScript files in your project.
    "declaration": false,
    //* Create sourcemaps for d.ts files.
    "declarationMap": false,
    //* Create source map files for emitted JavaScript files.
    "sourceMap": false,
    //* Disable emitting comments.
    "removeComments": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "*.config.js",
    ".d.ts"
  ],
  "exclude": ["node_modules"]
}
